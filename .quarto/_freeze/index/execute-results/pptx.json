{
  "hash": "7e0dcfa3a475d7d64e26a7235a428903",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducible environments for data science with {rix}\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\n  pptx:\n    freeze: true\nexecute:\n  echo: true\n---\n\n## Intro: Who am I\n\nBruno Rodrigues, Head of the Statistics Department at the Ministry of Research and Higher Education in Luxembourg\n\n## Intro: Contents\n\nSlides available online:\n\n[https://b-rodrigues.github.io/repro_ulisboa](https://b-rodrigues.github.io/repro_ulisboa)\n\nCode available here:\n\n[https://github.com/b-rodrigues/repro_ulisboa](https://github.com/b-rodrigues/repro_ulisboa)\n\n## What I will talk about\n\nThe puzzle you know:\n\n![](images/repro_puzzle.png){fig-align=\"center\"}\n\n## What I will talk about\n\nThe puzzle with Nix:\n\n![](images/repro_puzzle_nix.png){fig-align=\"center\"}\n\n## Available solutions for R\n\n- `{renv}` or `{groundhog}`: easy to use, but:\n  - Doesn’t save the version of R\n  - Installing older packages can fail (system dependencies)\n\n- Docker goes further:\n  - Manages R *and* system dependencies\n  - Containers can run anywhere\n- But:\n  - Not inherently reproducible\n\n## The Nix package manager (1/2)\n\nPackage manager: a tool to install and manage *packages*\n\nPackage: any software (not just R packages)\n\nA popular package manager:\n\n. . .\n\n![Google Play Store](images/play_store.png)\n\n## The Nix package manager (2/2)\n\n- To ensure reproducibility: R, R packages, and other dependencies\n  must be managed explicitly\n- Nix is a package manager truly focused on reproducible builds\n- Nix manages everything using a single text file (called a Nix expression)!\n- These expressions *always* produce the exact same result\n\n## rix: reproducible development environments with Nix (1/5)\n\n- `{rix}` ([website](https://docs.ropensci.org/rix/)) simplifies writing\n  Nix expressions!\n- Just use the provided `rix()` function:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(date = \"2025-06-13\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"code\",\n    project_path = \".\")\n```\n:::\n\n\n## rix: reproducible development environments with Nix (2/5)\n\n- `renv.lock` files can also serve as a starting point:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optional\n)\n```\n:::\n\n\n## rix: reproducible development environments with Nix (3/5)\n\n- List the R version and required packages\n- Optional:\n    * system packages, GitHub packages, or LaTeX packages\n    * an IDE (Rstudio, Radian, VS Code or \"other\")\n    * a Python version and Python packages to include\n    * a Julia version and Julia packages to include\n\n## rix: reproducible development environments with Nix (4/5)\n\n- `rix::rix()` generates a `default.nix` file\n- Build the expressions with `nix-build` (in terminal) or\n  `rix::nix_build()` from R\n- Enter the development environment with `nix-shell`\n- Expressions can be generated even without Nix installed (with some\n  limitations)\n\n## rix: reproducible development environments with Nix (5/5)\n\n- Can install specific package versions (write `\"dplyr@1.0.0\"`)\n- Can install packages hosted on GitHub\n- Many vignettes to get started! [See here](https://docs.ropensci.org/rix/articles/)\n\n## Temporary shells\n\n- Test tools, or bootstrap an environment using\n\n. . .\n\n```bash\nnix-shell -p R rPackages.rix\n```\n\n## Demonstration\n\n- Basics: `scripts/nix_expressions/01_rix_intro/`\n- Native VS Code/Positron on Windows: `scripts/nix_expressions/02_native_vscode_example/`\n- Nix and `{targets}`: `scripts/nix_expressions/03_nix_targets_pipeline`\n- Nix and Docker: `scripts/nix_expressions/04_docker/`\n- Nix and `{shiny}`: `scripts/nix_expressions/05_shiny`\n- GitHub Actions: [see here](https://github.com/b-rodrigues/rix_paper/tree/master)\n\n## Polyglot pipelines with `{rixpress}`\n\n- `{rixpress}` lets you chain processing steps in both R **and** Python\n- Uses `{rix}` to create a reproducible (Nix-based) execution environment\n  for the pipeline\n- Each pipeline step is a **Nix derivation**\n- Data transfer: automatic via `reticulate` or universal formats (JSON)\n\n## An example mixed pipeline\n\n```r\nlist(\n  rxp_py_file(…),    # Read a CSV with Python\n  rxp_py(…),         # Filter with Polars\n  rxp_py2r(…),       # Python → R transfer\n  rxp_r(…),          # Transform in R\n  rxp_r2py(…),       # R → Python transfer\n  rxp_py(…),         # Another Python step\n  rxp_py2r(…),       # Back to R\n  rxp_r(…)           # Final step\n) |> rixpress()\n```\n\n- Each step is named, typed (`py`, `r`, `r2py`, etc.)\n- You can add files (`functions.R`, images…)\n\n## Transfer with JSON (or other universal format)\n\n- Advantage: avoids using `reticulate`\n- Add a Python serialization function:\n\n. . .\n\n```python\ndef serialize_to_json(pl_df, path):\n    with open(path, 'w') as f:\n        f.write(pl_df.write_json())\n```\n\n- And on the R side:\n\n. . .\n\n```r\nrxp_r(\n  name = \"x\",\n  expr = my_fun(data),\n  unserialize_function = \"jsonlite::fromJSON\"\n)\n```\n\n## Document generation (Quarto or Rmd)\n\n- Easily integrate pipeline output into a `.qmd`:\n\n. . .\n\n````qmd\n```r\nrixpress::rxp_read(\"mtcars_head\")\n```\n````\n\n. . .\n\n- All created objects can be dynamically loaded in the document\n- You can pass additional files (content.qmd, images...)\n\n## Interactive demo\n\nSee `scripts/rixpress_demo`\n\n## To learn more\n\n- [Repository GitHub](https://github.com/b-rodrigues/rixpress)\n- [Website](https://b-rodrigues.github.io/rixpress/)\n- [rixpress examples repository](https://github.com/b-rodrigues/rixpress_demos)\n\n## Fin\n\nContact me if you have questions:\n\n- bruno@brodrigues.co\n- Twitter : [@brodriguesco](https://x.com/brodriguesco)\n- Mastodon : [@brodriguesco@fosstodon.org](https://fosstodon.org/@brodriguesco)\n- Blog : [www.brodrigues.co](https://brodrigues.co/)\n- Livre : [www.raps-with-r.dev](https://raps-with-r.dev/)\n- rix : [https://docs.ropensci.org/rix](https://docs.ropensci.org/rix)\n- rixpress : [https://b-rodrigues.github.io/rixpress/](https://b-rodrigues.github.io/rixpress/)\n\n. . .\n\nObrigado!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}